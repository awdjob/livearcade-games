{"version":3,"file":"script.min.js","names":["canvas","document","getElementById","ctx","getContext","BOX_SIZE","GRID_SIZE","width","height","box","gameLoop","score","speed","snake","x","y","direction","food","generateFood","startGame","window","parent","postMessage","gameMessage","gameStart","style","display","setInterval","update","foodX","foodY","Math","floor","random","some","segment","changeDirection","event","preventDefault","newDirection","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","key","UP","DOWN","LEFT","RIGHT","drawSnake","forEach","index","fillStyle","fillRect","strokeStyle","strokeRect","drawFood","beginPath","arc","PI","fill","moveSnake","head","unshift","innerText","clearInterval","pop","checkCollision","slice","restartGame","clearRect","addEventListener","gameReady"],"sources":["snake/script.js"],"mappings":"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","ignoreList":[],"sourcesContent":["const canvas = document.getElementById('gameCanvas');\nconst ctx = canvas.getContext('2d');\n\n// Set a fixed box size and calculate canvas size from it\nconst BOX_SIZE = 20;\nconst GRID_SIZE = 30;\ncanvas.width = canvas.height = BOX_SIZE * GRID_SIZE;\n\n// Update box constant to use our fixed size\nconst box = BOX_SIZE;\n\nlet score = 0;\nlet speed = 150;\nlet snake = [{ x: box * 5, y: box * 5 }];\nlet direction = 'RIGHT';\nlet food = generateFood();\nlet gameLoop;\n\n// Initialize all event listeners when the DOM is loaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    // Notify parent window that game is ready\n    window.parent.postMessage({ gameMessage: true, gameReady: true }, \"*\");\n\n    // Add button event listeners\n    document.getElementById('startButton').addEventListener('click', startGame);\n    document.getElementById('restartButton').addEventListener('click', restartGame);\n    \n    // Add direction button listeners\n    document.getElementById('upBtn').addEventListener('click', () => {\n        const event = { key: 'ArrowUp' };\n        changeDirection(event);\n    });\n\n    document.getElementById('downBtn').addEventListener('click', () => {\n        const event = { key: 'ArrowDown' };\n        changeDirection(event);\n    });\n\n    document.getElementById('leftBtn').addEventListener('click', () => {\n        const event = { key: 'ArrowLeft' };\n        changeDirection(event);\n    });\n\n    document.getElementById('rightBtn').addEventListener('click', () => {\n        const event = { key: 'ArrowRight' };\n        changeDirection(event);\n    });\n\n    // Add keyboard listener\n    document.addEventListener('keydown', changeDirection);\n});\n\nfunction startGame() {\n    score = 0;\n    window.parent.postMessage({ gameMessage: true, gameStart: true }, \"*\")\n    document.getElementById('startModal').style.display = 'none';\n    gameLoop = setInterval(update, speed);\n}\n\nfunction generateFood() {\n    let foodX, foodY;\n    do {\n        foodX = Math.floor((Math.random() * canvas.width) / box) * box;\n        foodY = Math.floor((Math.random() * canvas.height) / box) * box;\n    } while (snake.some(segment => segment.x === foodX && segment.y === foodY));\n    return { x: foodX, y: foodY };\n}\n\nfunction changeDirection(event) {\n    if (event.preventDefault) {\n        event.preventDefault();\n    }\n\n    const key = event.key;\n    const oppositeDirections = {\n        UP: 'DOWN',\n        DOWN: 'UP',\n        LEFT: 'RIGHT',\n        RIGHT: 'LEFT'\n    };\n    const newDirection = {\n        ArrowUp: 'UP',\n        ArrowDown: 'DOWN',\n        ArrowLeft: 'LEFT',\n        ArrowRight: 'RIGHT'\n    }[key];\n    if (newDirection && newDirection !== oppositeDirections[direction]) {\n        direction = newDirection;\n    }\n}\n\nfunction drawSnake() {\n    snake.forEach((segment, index) => {\n        ctx.fillStyle = index === 0 ? '#f04a64' : '#ffaf3d';\n        ctx.fillRect(segment.x, segment.y, box, box);\n        ctx.strokeStyle = '#161b22';\n        ctx.strokeRect(segment.x, segment.y, box, box);\n    });\n}\n\nfunction drawFood() {\n    ctx.fillStyle = '#39e75f';\n    ctx.beginPath();\n    ctx.arc(food.x + box / 2, food.y + box / 2, box / 2.5, 0, Math.PI * 2);\n    ctx.fill();\n}\n\nfunction moveSnake() {\n    const head = { ...snake[0] };\n    if (direction === 'UP') head.y -= box;\n    else if (direction === 'DOWN') head.y += box;\n    else if (direction === 'LEFT') head.x -= box;\n    else if (direction === 'RIGHT') head.x += box;\n\n    snake.unshift(head);\n\n    if (head.x === food.x && head.y === food.y) {\n        score += 10;\n        document.getElementById('score').innerText = `Score: ${score}`;\n        food = generateFood();\n        if (speed > 50) speed -= 5;\n        clearInterval(gameLoop);\n        gameLoop = setInterval(update, speed);\n    } else {\n        snake.pop();\n    }\n}\n\nfunction checkCollision() {\n    const head = snake[0];\n    if (\n        head.x < 0 ||\n        head.x >= canvas.width ||\n        head.y < 0 ||\n        head.y >= canvas.height ||\n        snake.slice(1).some(segment => segment.x === head.x && segment.y === head.y)\n    ) {\n        window.parent.postMessage({ gameMessage: true, score }, \"*\")\n        document.getElementById('gameOver').style.display = 'block';\n        clearInterval(gameLoop);\n    }\n}\n\nfunction restartGame() {\n    snake = [{ x: box * 5, y: box * 5 }];\n    direction = 'RIGHT';\n    score = 0;\n    speed = 150;\n    document.getElementById('score').innerText = `Score: 0`;\n    document.getElementById('gameOver').style.display = 'none';\n    food = generateFood();\n    gameLoop = setInterval(update, speed);\n    window.parent.postMessage({ gameMessage: true, gameStart: true }, \"*\")\n}\n\nfunction update() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawFood();\n    moveSnake();\n    drawSnake();\n    checkCollision();\n}"]}